generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  MASTER_ADMIN
  ORDER_MANAGER
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model User {
  id            String         @id @default(uuid())
  role          Role           @default(CUSTOMER)
  firstName     String         @map("first_name")
  lastName      String         @map("last_name")
  phone         String         @unique
  email         String         @unique
  profileImage  String?        @map("profile_image") // URL to profile image
  passwordHash  String         @map("password_hash")
  address       String?
  language      String         @default("English") // e.g., 'Amharic', 'Sudanese Arabic', 'English'
  status        String         @default("active") // e.g., 'active', 'blacklisted'
  orders        Order[]
  reviews       Review[]
  notifications Notification[]

  @@map("users")
}

model Category {
  id       String     @id @default(uuid())
  name     String
  slug     String     @unique // e.g., 'electronics', 'home-kitchen'
  parentId String?    @map("parent_id")
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  products Product[]

  @@map("categories")
}

model Product {
  id          String           @id @default(uuid())
  name        String
  slug        String           @unique // e.g., 'smartphone-64gb-black'
  description String?
  categoryId  String?          @map("category_id")
  basePrice   Float            @map("base_price") // Base price if no variants
  createdAt   DateTime         @default(now()) @map("created_at")
  category    Category?        @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[] // Variants with specific prices and images
  reviews     Review[]
  discounts   Discount[] // Discounts applied to this product
  orderItems  OrderItem[] // Relation to OrderItem

  @@map("products")
}

model ProductVariant {
  id              String      @id @default(uuid())
  productId       String      @map("product_id")
  variantName     String // e.g., 'Red', 'Large', '64GB'
  price           Float // Variant-specific price
  stockQuantity   Int         @default(0) @map("stock_quantity")
  isAvailable     Boolean     @default(true) @map("is_available")
  procurementTime String?     @map("procurement_time") // e.g., '3 days'
  imageUrl        String?     @map("image_url") // Variant-specific image
  product         Product     @relation(fields: [productId], references: [id])
  orderItems      OrderItem[]
  discounts       Discount[] // Discounts applied to this variant

  @@map("product_variants")
}

model Discount {
  id         String          @id @default(uuid())
  productId  String?         @map("product_id")
  variantId  String?         @map("variant_id")
  type       DiscountType // e.g., 'PERCENTAGE', 'FIXED'
  value      Float // e.g., 10.0 for 10% or 100.0 for fixed amount
  startDate  DateTime?       @map("start_date")
  endDate    DateTime?       @map("end_date")
  product    Product?        @relation(fields: [productId], references: [id])
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  orderItems OrderItem[] // Tracks which orders used this discount

  @@map("discounts")
}

model Order {
  id                 String              @id @default(uuid())
  customerId         String              @map("customer_id")
  status             String              @default("pending") // e.g., 'pending', 'approved', 'in_procurement', 'out_for_delivery', 'delivered', 'rejected'
  totalPrice         Float               @map("total_price") // After applying discounts
  paymentMethod      String              @map("payment_method") // e.g., 'cash_on_delivery', 'digital_wallet', 'invoice'
  paymentStatus      String              @default("pending") @map("payment_status")
  createdAt          DateTime            @default(now()) @map("created_at")
  customer           User                @relation(fields: [customerId], references: [id])
  orderItems         OrderItem[]
  invoice            Invoice?
  deliveryAssignment DeliveryAssignment?

  @@map("orders")
}

model OrderItem {
  id         String          @id @default(uuid())
  orderId    String          @map("order_id")
  productId  String          @map("product_id")
  variantId  String?         @map("variant_id")
  discountId String?         @map("discount_id") // Tracks applied discount
  quantity   Int
  price      Float // Price at time of order (after discount)
  status     String          @default("pending")
  order      Order           @relation(fields: [orderId], references: [id])
  product    Product         @relation(fields: [productId], references: [id])
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  discount   Discount?       @relation(fields: [discountId], references: [id])

  @@map("order_items")
}

model Invoice {
  id            String  @id @default(uuid())
  orderId       String  @unique @map("order_id")
  invoiceNumber String  @unique @map("invoice_number")
  pdfUrl        String? @map("pdf_url")
  paymentStatus String  @default("pending") @map("payment_status")
  order         Order   @relation(fields: [orderId], references: [id])

  @@map("invoices")
}

model Review {
  id         String   @id @default(uuid())
  productId  String   @map("product_id")
  customerId String   @map("customer_id")
  rating     Int
  reviewText String?  @map("review_text")
  createdAt  DateTime @default(now()) @map("created_at")
  product    Product  @relation(fields: [productId], references: [id])
  customer   User     @relation(fields: [customerId], references: [id])

  @@map("reviews")
}

model Promotion {
  id        String    @id @default(uuid())
  title     String
  type      String // e.g., 'percentage', 'fixed'
  value     Float
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  bannerUrl String?   @map("banner_url")

  @@map("promotions")
}

model Notification {
  id      String  @id @default(uuid())
  userId  String  @map("user_id")
  title   String
  message String
  type    String? // e.g., 'order_update', 'restock'
  status  String  @default("unread")
  user    User    @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model DeliveryAssignment {
  id            String  @id @default(uuid())
  orderId       String  @unique @map("order_id")
  driverName    String? @map("driver_name")
  driverContact String? @map("driver_contact")
  status        String  @default("assigned") // e.g., 'assigned', 'in_transit', 'delivered'
  proofImageUrl String? @map("proof_image_url")
  order         Order   @relation(fields: [orderId], references: [id])

  @@map("delivery_assignments")
}

model OTP {
  id        String   @id @default(uuid())
  phone     String   @unique
  hash      String
  createdAt DateTime @default(now())
}
